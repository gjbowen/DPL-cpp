#ifndef parser_
#define parser_
Lexeme* program();
bool funcDefPending();
Lexeme* funcDef();
bool returnPending();
Lexeme* returnList();
bool paramListPending();
Lexeme* paramList();
Lexeme* argsList();
Lexeme* block();
Lexeme* statementList();
bool statementPending();
Lexeme* statement();
bool varExprPending();
Lexeme* varExpr(); 
bool printStatementPending();
Lexeme* printStatement();
bool printlnStatementPending();
Lexeme* printlnStatement();
Lexeme* expr();
bool unaryPending();
Lexeme* unary();
bool opPending();
Lexeme* op();
Lexeme* conditionExpr();
bool forStatementPending();
Lexeme* forStatement();
bool whileStatementPending();
Lexeme* whileStatement();
bool ifStatementPending();
Lexeme* ifStatement();
bool optElseStatementPending();
Lexeme* optElseStatement();
bool compoundPending();
Lexeme* compound();
bool equalityPending();
Lexeme* equality();
bool incrementOnePending();
Lexeme* incrementOne();
bool decrementOnePending();
Lexeme* decrementOne();
bool incrementPending();
Lexeme* increment();
bool decrementPending();
Lexeme* decrement();
Lexeme* parse();
Lexeme* advance();
Lexeme* match(lexeme_type type); 
bool check(lexeme_type type);
void matchNoAdvance(lexeme_type type);
void showTree(Lexeme* tree);
#endif
